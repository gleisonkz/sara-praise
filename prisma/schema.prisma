datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Ministry {
  ministryID       Int               @id @default(autoincrement())
  name             String            @unique
  ownerID          Int
  owner            User              @relation(fields: [ownerID], references: [userID])
  songs            Song[]
  members          Member[]
  artists          Artist[]
  scales           Scale[]
  roles            Role[]
  ministerSongKeys MinisterSongKey[]
}

model User {
  userID     Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  imageURL   String     @default("")
  ministries Ministry[]
  members    Member[]
}

model Member {
  memberID   Int @id @default(autoincrement())
  ministryID Int

  userID           Int
  user             User              @relation(fields: [userID], references: [userID])
  ministry         Ministry          @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  permissions      Permission[]
  participants     Participant[]
  roles            Role[]
  ministerSongKeys MinisterSongKey[]
  scaleSongs       ScaleSong[]
}

model Permission {
  permissionID Int     @id @default(autoincrement())
  name         String
  member       Member? @relation(fields: [memberID], references: [memberID])
  memberID     Int?
}

model Role {
  roleID  Int    @id @default(autoincrement())
  name    String
  iconUrl String

  members         Member[]
  ministries      Ministry[]
  participantRole ParticipantRole[]
}

model Participant {
  participantID   Int               @id @default(autoincrement())
  memberID        Int
  scaleID         Int
  member          Member            @relation(fields: [memberID], references: [memberID])
  scale           Scale             @relation(fields: [scaleID], references: [scaleID])
  participantRole ParticipantRole[]
}

model ParticipantRole {
  participantRoleID Int         @id @default(autoincrement())
  roleID            Int
  participantID     Int
  role              Role        @relation(fields: [roleID], references: [roleID])
  participant       Participant @relation(fields: [participantID], references: [participantID], onDelete: Cascade)
}

model Scale {
  scaleID Int      @id @default(autoincrement())
  title   String
  date    DateTime
  notes   String

  ministryID   Int
  ministry     Ministry      @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  participants Participant[]
  scaleSongs   ScaleSong[]
}

model ScaleSong {
  scaleSongID Int  @id @default(autoincrement())
  scaleID     Int
  songID      Int
  memberID    Int?

  artistName      String
  songTitle       String
  ministerSongKey String

  scale  Scale   @relation(fields: [scaleID], references: [scaleID])
  song   Song    @relation(fields: [songID], references: [songID])
  member Member? @relation(fields: [memberID], references: [memberID])
}

model Song {
  songID           Int               @id @default(autoincrement())
  title            String
  tags             String[]
  observations     String
  audioUrl         String
  youtubeUrl       String
  lyricUrl         String
  chordsUrl        String
  artistID         Int
  keyID            Int
  ministryID       Int
  artist           Artist            @relation(fields: [artistID], references: [artistID])
  key              SongKey           @relation(fields: [keyID], references: [songKeyID])
  ministry         Ministry          @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  ministerSongKeys MinisterSongKey[]
  scaleSongs       ScaleSong[]
}

model SongKey {
  songKeyID        Int               @id @default(autoincrement())
  notation         String
  name             String
  song             Song[]
  ministerSongKeys MinisterSongKey[]
}

model MinisterSongKey {
  songID     Int
  memberID   Int
  songKeyID  Int
  ministryID Int

  song     Song     @relation(fields: [songID], references: [songID])
  songKey  SongKey  @relation(fields: [songKeyID], references: [songKeyID])
  ministry Ministry @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  member   Member   @relation(fields: [memberID], references: [memberID])


  @@id([songID, memberID])
}

model Artist {
  artistID   Int    @id @default(autoincrement())
  ministryID Int
  name       String

  ministry Ministry @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  songs    Song[]
  @@unique([name, ministryID])
}
