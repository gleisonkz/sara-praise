datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Ministry {
  ministryID       Int               @id @default(autoincrement())
  name             String
  ownerID          Int
  owner            User              @relation(fields: [ownerID], references: [userID])
  songs            Song[]
  members          Member[]
  artists          Artist[]
  scales           Scale[]
  roles            Role[]
  ministerSongKeys MinisterSongKey[]
}

model Role {
  roleID  Int    @id @default(autoincrement())
  name    String
  iconUrl String

  members      Member[]
  ministries   Ministry[]
  participants Participant[]

}

model User {
  userID     Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  imageURL   String     @default("")
  ministries Ministry[]
  members    Member[]
}

model Member {
  memberID   Int @id @default(autoincrement())
  ministryID Int

  userID           Int
  user             User              @relation(fields: [userID], references: [userID])
  ministry         Ministry          @relation(fields: [ministryID], references: [ministryID], onDelete: Cascade)
  permissions      Permission[]
  participants     Participant[]
  roles            Role[]
  ministerSongKeys MinisterSongKey[]
}

model Permission {
  permissionID Int     @id @default(autoincrement())
  name         String
  member       Member? @relation(fields: [memberID], references: [memberID])
  memberID     Int?
}

model Participant {
  participantID Int    @id @default(autoincrement())
  memberID      Int
  scaleID       Int
  member        Member @relation(fields: [memberID], references: [memberID])
  scale         Scale  @relation(fields: [scaleID], references: [scaleID])
  roles         Role[]
}

model Scale {
  scaleID Int      @id @default(autoincrement())
  title   String
  date    DateTime
  notes   String

  ministryID   Int
  ministry     Ministry      @relation(fields: [ministryID], references: [ministryID])
  participants Participant[]
  scaleSongs   ScaleSong[]
}

model ScaleSong {
  scaleID Int
  songID  Int

  artistName      String
  songTitle       String
  ministerSongKey String

  scale Scale @relation(fields: [scaleID], references: [scaleID])
  song  Song  @relation(fields: [songID], references: [songID])

  @@id([scaleID, songID])
}

model Song {
  songID           Int               @id @default(autoincrement())
  title            String
  tags             String[]
  observations     String
  audioUrl         String
  youtubeUrl       String
  lyricUrl         String
  chordsUrl        String
  artistID         Int
  keyID            Int
  ministryID       Int
  artist           Artist            @relation(fields: [artistID], references: [artistID])
  key              SongKey           @relation(fields: [keyID], references: [songKeyID])
  ministry         Ministry          @relation(fields: [ministryID], references: [ministryID])
  ministerSongKeys MinisterSongKey[]
  scaleSongs       ScaleSong[]
}

model SongKey {
  songKeyID        Int               @id @default(autoincrement())
  notation         String
  name             String
  song             Song[]
  ministerSongKeys MinisterSongKey[]
}

model MinisterSongKey {
  songID     Int
  memberID   Int
  songKeyID  Int
  ministryID Int

  song     Song     @relation(fields: [songID], references: [songID])
  songKey  SongKey  @relation(fields: [songKeyID], references: [songKeyID])
  ministry Ministry @relation(fields: [ministryID], references: [ministryID])
  member   Member   @relation(fields: [memberID], references: [memberID])


  @@id([songID, memberID])
}

model Artist {
  artistID   Int    @id @default(autoincrement())
  ministryID Int
  name       String

  ministry Ministry @relation(fields: [ministryID], references: [ministryID])
  songs    Song[]
}
